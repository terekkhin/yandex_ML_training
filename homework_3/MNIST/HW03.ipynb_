{"cells":[{"cell_type":"markdown","metadata":{"id":"I0oVvdP7ssbJ"},"source":["## Домашнее задание №3\n","\n","##### Автор: [Радослав Нейчев](https://www.linkedin.com/in/radoslav-neychev/), @neychev"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"GqAKleQBssbO","executionInfo":{"status":"ok","timestamp":1700567207177,"user_tz":-180,"elapsed":7241,"user":{"displayName":"","userId":""}}},"outputs":[],"source":["import numpy as np\n","\n","import torch\n","from torch import nn\n","from torch.nn import functional as F\n","\n","import torchvision\n","from torchvision.datasets import MNIST\n","\n","from matplotlib import pyplot as plt\n","from IPython.display import clear_output"]},{"cell_type":"markdown","metadata":{"id":"LslrpKywssbP"},"source":["### Задача №1:\n","Вернемся к задаче распознавания рукописных цифр, рассмотренной на первом занятии. Все также будем работать с набором данных [MNIST](http://yann.lecun.com/exdb/mnist/). В данном задании воспользуемся всем датасетом целиком.\n","\n","__Ваша основная задача: реализовать весь пайплан обучения модели и добиться качества $\\geq 92\\%$ на тестовой выборке.__\n","\n","Код для обучения модели в данном задании отсутствует. Присутствует лишь несколько тестов, которые помогут вам отладить свое решение. За примером можно обратиться к ноутбуку первого занятия.\n","\n","Настоятельно рекомендуем написать код \"с нуля\", лишь поглядывая на пример, а не просто \"скопировать-вставить\". Это поможет вам в дальнейшем."]},{"cell_type":"code","execution_count":2,"metadata":{"id":"aPtDhU07ssbQ","executionInfo":{"status":"ok","timestamp":1700567262269,"user_tz":-180,"elapsed":1988,"user":{"displayName":"","userId":""}},"outputId":"cc57294c-cf50-4b2f-e87f-ff64c1722496","colab":{"base_uri":"https://localhost:8080/","height":817}},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9912422/9912422 [00:00<00:00, 105507649.32it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 28881/28881 [00:00<00:00, 37538175.96it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1648877/1648877 [00:00<00:00, 28085294.37it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 4542/4542 [00:00<00:00, 2299399.97it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/raw\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Image label: 0')"]},"metadata":{},"execution_count":2},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAaAAAAGzCAYAAABpdMNsAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAl9ElEQVR4nO3df1RVdb7/8dcB9YAIh/AHPxQRf1KaesfMvDX+ZBSa8mdjVjOpYzoZdv2R1WKmMpsmZnTyNplTd6ZGmpXm3Mof1XdyKhRcFVqajnq9MmqYGoIjBSgKIufz/cPrmY6Augn4AD4fa+21OHt/3me/2e3lq83+nH1cxhgjAAAaWIDtBgAAVycCCABgBQEEALCCAAIAWEEAAQCsIIAAAFYQQAAAKwggAIAVBBAAwAoCCGhghw4dksvlUnp6uuPaJ598Ui6XSydOnKizfqZOnaouXbrU2fsBV4oAQqOSnp4ul8ulbdu22W4FDrz99tv63ve+p6CgIHXu3FkLFy7UuXPnbLeFRo4AAvCdvPfeexo3bpzCw8O1bNkyjRs3Tk8//bQefPBB262hkWthuwEATduCBQvUt29fvf/++2rR4vw/KWFhYXrmmWc0Z84cJSQkWO4QjRVXQGj0pk6dqjZt2ujw4cO67bbb1KZNG3Xs2FHLly+XJO3evVsjRoxQSEiI4uLitGrVKr/6r7/+WgsWLND111+vNm3aKCwsTMnJyfr73/9eZV9ffvmlxowZo5CQEHXo0EHz5s3T3/72N7lcLmVmZvqN3bp1q5KSkuTxeNS6dWsNHTpUH3/8ca1+x127dmnq1Knq2rWrgoKCFBUVpZ/+9KcqLCysdvyJEyc0adIkhYWFqW3btpozZ47KysqqjHvttdc0YMAABQcHKyIiQpMnT9aRI0cu28+xY8e0b98+VVRUXHLc3r17tXfvXs2cOdMXPpL0wAMPyBijN99887L7wtWLAEKTUFlZqeTkZMXGxmrx4sXq0qWLZs+erfT0dCUlJemGG27Qb37zG4WGhuree+9Vbm6ur/aLL77QunXrdNttt2np0qV6+OGHtXv3bg0dOlR5eXm+caWlpRoxYoQ+/PBD/cd//Id+8Ytf6JNPPtGjjz5apZ+NGzdqyJAhKikp0cKFC/XMM8+oqKhII0aM0Keffur49/vggw/0xRdfaNq0aVq2bJkmT56s1atX69Zbb1V135gyadIklZWVKS0tTbfeequef/55zZw502/Mr371K917773q0aOHli5dqrlz5yojI0NDhgxRUVHRJftJTU3Vtddeq6+++uqS43bs2CFJuuGGG/zWx8TEqFOnTr7tQLUM0IisWLHCSDKfffaZb92UKVOMJPPMM8/41n3zzTcmODjYuFwus3r1at/6ffv2GUlm4cKFvnVlZWWmsrLSbz+5ubnG7Xabp556yrfu2WefNZLMunXrfOvOnDljEhISjCSzadMmY4wxXq/X9OjRw4wePdp4vV7f2NOnT5v4+Hjzgx/84JK/Y25urpFkVqxY4Vd7sddff91IMps3b/atW7hwoZFkxowZ4zf2gQceMJLM3//+d2OMMYcOHTKBgYHmV7/6ld+43bt3mxYtWvitnzJliomLi/Mbd+GY5+bmXvJ3WbJkiZFkDh8+XGXbwIEDzU033XTJelzduAJCk3Hffff5fg4PD1evXr0UEhKiSZMm+db36tVL4eHh+uKLL3zr3G63AgLOn+qVlZUqLCxUmzZt1KtXL33++ee+cRs2bFDHjh01ZswY37qgoCDNmDHDr4+dO3dq//79uvvuu1VYWKgTJ07oxIkTKi0t1ciRI7V582Z5vV5Hv1twcLDv57KyMp04cUI33XSTJPn1eEFKSorf6ws3/P/6179KktasWSOv16tJkyb5+jtx4oSioqLUo0cPbdq06ZL9pKenyxhz2enZZ86ckXT+GF8sKCjItx2oDpMQ0CQEBQWpffv2fus8Ho86deokl8tVZf0333zje+31evW73/1Ov//975Wbm6vKykrftrZt2/p+/vLLL9WtW7cq79e9e3e/1/v375ckTZkypcZ+i4uLdc0111zhb3f+PtWiRYu0evVqHT9+vMp7XaxHjx5+r7t166aAgAAdOnTI16Mxpsq4C1q2bHnFvV3KheAsLy+vsq2srMwvWIGLEUBoEgIDAx2tN9+6b/LMM8/o8ccf109/+lP98pe/VEREhAICAjR37lzHVyqSfDVLlixR//79qx3Tpk0bR+85adIkffLJJ3r44YfVv39/tWnTRl6vV0lJSVfU48Wh6fV65XK59N5771V7jJz2V5Po6GhJ5yctxMbG+m07duyYbrzxxjrZD5onAgjN3ptvvqnhw4frlVde8VtfVFSkdu3a+V7HxcVp7969Msb4/YN+4MABv7pu3bpJOj/VODEx8Tv398033ygjI0OLFi3SE0884Vt/4UqrOvv371d8fLxfj16v1/cns27duskYo/j4ePXs2fM791iTCwG8bds2v7DJy8vT0aNHq0yMAL6Ne0Bo9gIDA6vMJHvjjTeqzPAaPXq0vvrqK7399tu+dWVlZfrjH//oN27AgAHq1q2bfvvb3+rUqVNV9vfPf/7TcX+SqvT43HPP1VhzYQr6BcuWLZMkJScnS5ImTJigwMBALVq0qMr7GmNqnN59wZVOw+7du7cSEhL0hz/8we9Pmy+++KJcLpfuuOOOS9bj6sYVEJq92267TU899ZSmTZumf//3f9fu3bu1cuVKde3a1W/cz372M73wwgu66667NGfOHEVHR2vlypUKCgqS9K8/cwUEBOjll19WcnKyevfurWnTpqljx4766quvtGnTJoWFhemdd9654v7CwsI0ZMgQLV68WBUVFerYsaPef/99v6nkF8vNzdWYMWOUlJSk7Oxsvfbaa7r77rvVr18/SeevgJ5++mmlpqbq0KFDGjdunEJDQ5Wbm6u1a9dq5syZWrBgQY3vn5qaqldffVW5ubmXnYiwZMkSjRkzRqNGjdLkyZO1Z88evfDCC7rvvvt07bXXXvFxwFXI2vw7oBo1TcMOCQmpMnbo0KGmd+/eVdbHxcWZH/7wh77XZWVl5qGHHjLR0dEmODjY3HzzzSY7O9sMHTrUDB061K/2iy++MD/84Q9NcHCwad++vXnooYfMW2+9ZSSZLVu2+I3dsWOHmTBhgmnbtq1xu90mLi7OTJo0yWRkZFzyd6xuGvbRo0fN+PHjTXh4uPF4POZHP/qRycvLqzKl/MI07L1795o77rjDhIaGmmuuucbMnj3bnDlzpsq+3nrrLXPLLbeYkJAQExISYhISEkxKSorJycnxO761nYZ9wdq1a03//v2N2+02nTp1Mo899pg5e/bsFdXi6uUypppPuQHwee655zRv3jwdPXpUHTt2tN0O0GwQQMC3nDlzpspncv7t3/5NlZWV+sc//mGxM6D54R4Q8C0TJkxQ586d1b9/fxUXF+u1117Tvn37tHLlStutAc0OAQR8y+jRo/Xyyy9r5cqVqqys1HXXXafVq1frzjvvtN0a0OzwJzgAgBV8DggAYAUBBACwotHdA/J6vcrLy1NoaGiV51sBABo/Y4xOnjypmJgY35Poq9PoAigvL6/KQw0BAE3PkSNH1KlTpxq3N7oACg0NlSTdolvVQnXzyHgAQMM5pwp9pL/6/j2vSb0F0PLly7VkyRLl5+erX79+WrZs2RU9mv3Cn91aqKVauAggAGhy/m9u9eVuo9TLJIS//OUvmj9/vhYuXKjPP/9c/fr10+jRo6t80RYA4OpVLwG0dOlSzZgxQ9OmTdN1112nl156Sa1bt9af/vSn+tgdAKAJqvMAOnv2rLZv3+73RV0BAQFKTExUdnZ2lfHl5eUqKSnxWwAAzV+dB9CJEydUWVmpyMhIv/WRkZHKz8+vMj4tLU0ej8e3MAMOAK4O1j+ImpqaquLiYt9y5MgR2y0BABpAnc+Ca9eunQIDA1VQUOC3vqCgQFFRUVXGu91uud3uum4DANDI1fkVUKtWrTRgwABlZGT41nm9XmVkZGjw4MF1vTsAQBNVL58Dmj9/vqZMmaIbbrhBN954o5577jmVlpZq2rRp9bE7AEATVC8BdOedd+qf//ynnnjiCeXn56t///7asGFDlYkJAICrV6P7PqCSkhJ5PB4N01iehAAATdA5U6FMrVdxcbHCwsJqHGd9FhwA4OpEAAEArCCAAABWEEAAACsIIACAFQQQAMAKAggAYAUBBACwggACAFhBAAEArCCAAABWEEAAACsIIACAFQQQAMAKAggAYAUBBACwggACAFhBAAEArCCAAABWEEAAACsIIACAFQQQAMAKAggAYAUBBACwggACAFhBAAEArCCAAABWEEAAACsIIACAFQQQAMAKAggAYAUBBACwggACAFhBAAEArCCAAABWEEAAACsIIACAFQQQAMAKAggAYAUBBACwggACAFhBAAEArCCAAABWEEAAACsIIACAFQQQAMAKAggAYAUBBACwggACAFhBAAEArCCAAABWEEAAACsIIACAFQQQAMAKAggAYEWdB9CTTz4pl8vltyQkJNT1bgAATVyL+njT3r1768MPP/zXTlrUy24AAE1YvSRDixYtFBUVVR9vDQBoJurlHtD+/fsVExOjrl276p577tHhw4drHFteXq6SkhK/BQDQ/NV5AA0aNEjp6enasGGDXnzxReXm5ur73/++Tp48We34tLQ0eTwe3xIbG1vXLQEAGiGXMcbU5w6KiooUFxenpUuXavr06VW2l5eXq7y83Pe6pKREsbGxGqaxauFqWZ+t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5ORozZo1Frv11+gDCP+SnJzs+7lv374aNGiQ4uLi9N///d+aPn26xc7QGEyePNn38/XXX6++ffuqW7duyszM1MiRIy12Vj9SUlK0Z8+eq+I+6KXUdBxmzpzp+/n6669XdHS0Ro4cqYMHD6pbt24N3Wa1Gv2f4Nq1a6fAwMAqs1gKCgoUFRVlqavGITw8XD179tSBAwdst2LNhXOA86Oqrl27ql27ds3y/Jg9e7beffddbdq0ye/7w6KionT27FkVFRX5jW+u50NNx6E6gwYNkqRGdT40+gBq1aqVBgwYoIyMDN86r9erjIwMDR482GJn9p06dUoHDx5UdHS07VasiY+PV1RUlN/5UVJSoq1bt17158fRo0dVWFjYrM4PY4xmz56ttWvXauPGjYqPj/fbPmDAALVs2dLvfMjJydHhw4eb1flwueNQnZ07d0pS4zofbM+CuBKrV682brfbpKenm71795qZM2ea8PBwk5+fb7u1BvXQQw+ZzMxMk5ubaz7++GOTmJho2rVrZ44fP267tXp18uRJs2PHDrNjxw4jySxdutTs2LHDfPnll8YYY37961+b8PBws379erNr1y4zduxYEx8fb86cOWO587p1qeNw8uRJs2DBApOdnW1yc3PNhx9+aL73ve+ZHj16mLKyMtut15lZs2YZj8djMjMzzbFjx3zL6dOnfWPuv/9+07lzZ7Nx40azbds2M3jwYDN48GCLXde9yx2HAwcOmKeeesps27bN5ObmmvXr15uuXbuaIUOGWO7cX5MIIGOMWbZsmencubNp1aqVufHGG82WLVtst9Tg7rzzThMdHW1atWplOnbsaO68805z4MAB223Vu02bNhlJVZYpU6YYY85PxX788cdNZGSkcbvdZuTIkSYnJ8du0/XgUsfh9OnTZtSoUaZ9+/amZcuWJi4uzsyYMaPZ/U9adb+/JLNixQrfmDNnzpgHHnjAXHPNNaZ169Zm/Pjx5tixY/aargeXOw6HDx82Q4YMMREREcbtdpvu3bubhx9+2BQXF9tt/CJ8HxAAwIpGfw8IANA8EUAAACsIIACAFQQQAMAKAggAYAUBBACwggACAFhBAAEArCCAAABWEEAAACsIIACAFf8fPJFyGDMok3UAAAAASUVORK5CYII=\n"},"metadata":{}}],"source":["# do not change the code in the block below\n","# __________start of block__________\n","\n","train_mnist_data = MNIST('.', train=True, transform=torchvision.transforms.ToTensor(), download=True)\n","test_mnist_data = MNIST('.', train=False, transform=torchvision.transforms.ToTensor(), download=True)\n","\n","\n","train_data_loader = torch.utils.data.DataLoader(\n","    train_mnist_data,\n","    batch_size=32,\n","    shuffle=True,\n","    num_workers=2\n",")\n","\n","test_data_loader = torch.utils.data.DataLoader(\n","    test_mnist_data,\n","    batch_size=32,\n","    shuffle=False,\n","    num_workers=2\n",")\n","\n","random_batch = next(iter(train_data_loader))\n","_image, _label = random_batch[0][0], random_batch[1][0]\n","plt.figure()\n","plt.imshow(_image.reshape(28, 28))\n","plt.title(f'Image label: {_label}')\n","# __________end of block__________"]},{"cell_type":"markdown","metadata":{"id":"aXtLRSAXssbQ"},"source":["Постройте модель ниже. Пожалуйста, не стройте переусложненную сеть, не стоит делать ее глубже четырех слоев (можно и меньше). Ваша основная задача – обучить модель и получить качество на отложенной (тестовой выборке) не менее 92% accuracy.\n","\n","*Комментарий: для этого достаточно линейных слоев и функций активации.*\n","\n","__Внимание, ваша модель должна быть представлена именно переменной `model`.__"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"PyIg58r7ssbR","executionInfo":{"status":"ok","timestamp":1700569134170,"user_tz":-180,"elapsed":323,"user":{"displayName":"","userId":""}}},"outputs":[],"source":["# Creating model instance\n","class Net(nn.Module):\n","  def __init__(self):\n","       super(Net, self).__init__()\n","       self.fc1 = nn.Linear(28 * 28, 200)\n","       self.ac1 = nn.Sigmoid()\n","       self.fc2 = nn.Linear(200, 10)\n","\n","  def forward(self, x):\n","    x = self.fc1(x)\n","    x = self.ac1(x)\n","    x = self.fc2(x)\n","    return x\n","\n","model = Net() # your code here"]},{"cell_type":"markdown","metadata":{"id":"u7mtPXPussbS"},"source":["Локальные тесты для проверки вашей модели доступны ниже:"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"Kx5mzu97ssbT","executionInfo":{"status":"ok","timestamp":1700569136959,"user_tz":-180,"elapsed":3,"user":{"displayName":"","userId":""}},"outputId":"34d47e4c-fb67-4ec2-c191-1a8a9b5a2105","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Everything seems fine!\n"]}],"source":["# do not change the code in the block below\n","# __________start of block__________\n","assert model is not None, 'Please, use `model` variable to store your model'\n","\n","try:\n","    x = random_batch[0].reshape(-1, 784)\n","    y = random_batch[1]\n","\n","    # compute outputs given inputs, both are variables\n","    y_predicted = model(x)\n","except Exception as e:\n","    print('Something is wrong with the model')\n","    raise e\n","\n","\n","assert y_predicted.shape[-1] == 10, 'Model should predict 10 logits/probas'\n","\n","print('Everything seems fine!')\n","# __________end of block__________"]},{"cell_type":"markdown","metadata":{"id":"1sDJUiiessbU"},"source":["Настройте параметры модели на обучающей выборке. В качестве примера можете воспользоваться ноутбуком с занятия №1. Также рекомендуем поработать с различными оптимизаторами."]},{"cell_type":"code","execution_count":26,"metadata":{"id":"epcObcd4ssbV","executionInfo":{"status":"ok","timestamp":1700569156678,"user_tz":-180,"elapsed":17167,"user":{"displayName":"","userId":""}}},"outputs":[],"source":["# your code here\n","loss = nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=1.0e-3)\n","for batch in train_data_loader:\n","    optimizer.zero_grad()\n","    preds = model.forward(batch[0].reshape(-1, 28*28))\n","\n","    loss_value = loss(preds, batch[1])\n","    loss_value.backward()\n","\n","    optimizer.step()"]},{"cell_type":"markdown","metadata":{"id":"KbeDQ8sSssbV"},"source":["Также, напоминаем, что в любой момент можно обратиться к замечательной [документации](https://pytorch.org/docs/stable/index.html) и [обучающим примерам](https://pytorch.org/tutorials/).  "]},{"cell_type":"markdown","metadata":{"id":"ue_0mewrssbV"},"source":["Оценим качество классификации:"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"EsMVno53ssbV","executionInfo":{"status":"ok","timestamp":1700569174289,"user_tz":-180,"elapsed":12937,"user":{"displayName":"","userId":""}}},"outputs":[],"source":["predicted_labels = []\n","real_labels = []\n","model.eval()\n","with torch.no_grad():\n","    for batch in train_data_loader:\n","        y_predicted = model(batch[0].reshape(-1, 784))\n","        predicted_labels.append(y_predicted.argmax(dim=1))\n","        real_labels.append(batch[1])\n","\n","predicted_labels = torch.cat(predicted_labels)\n","real_labels = torch.cat(real_labels)\n","train_acc = (predicted_labels == real_labels).type(torch.FloatTensor).mean()"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"iNjGVZrUssbW","executionInfo":{"status":"ok","timestamp":1700569176210,"user_tz":-180,"elapsed":488,"user":{"displayName":"","userId":""}},"outputId":"4c7039a0-faa4-468c-9aa3-1036416bc853","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Neural network accuracy on train set: 0.94075\n"]}],"source":["print(f'Neural network accuracy on train set: {train_acc:3.5}')"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"teGy7Z71ssbW","executionInfo":{"status":"ok","timestamp":1700569181520,"user_tz":-180,"elapsed":2738,"user":{"displayName":"","userId":""}}},"outputs":[],"source":["predicted_labels = []\n","real_labels = []\n","model.eval()\n","with torch.no_grad():\n","    for batch in test_data_loader:\n","        y_predicted = model(batch[0].reshape(-1, 784))\n","        predicted_labels.append(y_predicted.argmax(dim=1))\n","        real_labels.append(batch[1])\n","\n","predicted_labels = torch.cat(predicted_labels)\n","real_labels = torch.cat(real_labels)\n","test_acc = (predicted_labels == real_labels).type(torch.FloatTensor).mean()"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"4djZNCakssbW","executionInfo":{"status":"ok","timestamp":1700569183268,"user_tz":-180,"elapsed":403,"user":{"displayName":"","userId":""}},"outputId":"c1ca6f55-2d3e-468b-fd73-f37bc3cbb2c3","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Neural network accuracy on test set: 0.9387\n"]}],"source":["print(f'Neural network accuracy on test set: {test_acc:3.5}')"]},{"cell_type":"markdown","metadata":{"id":"pixxYPUHssbW"},"source":["Проверка, что необходимые пороги пройдены:"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"LQ861KrfssbW","executionInfo":{"status":"ok","timestamp":1700569187134,"user_tz":-180,"elapsed":305,"user":{"displayName":"","userId":""}}},"outputs":[],"source":["assert test_acc >= 0.92, 'Test accuracy is below 0.92 threshold'\n","assert train_acc >= 0.91, 'Train accuracy is below 0.91 while test accuracy is fine. We recommend to check your model and data flow'"]},{"cell_type":"markdown","metadata":{"id":"hIkcJkmEssbW"},"source":["### Сдача задания\n","Загрузите файл `hw03_data_dict.npy` (ссылка есть на странице с заданием) и запустите код ниже для генерации посылки. Код ниже может его загрузить (но в случае возникновения ошибки скачайте и загрузите его вручную)."]},{"cell_type":"code","execution_count":32,"metadata":{"id":"3vOGT4dWssbW","executionInfo":{"status":"ok","timestamp":1700569202045,"user_tz":-180,"elapsed":716,"user":{"displayName":"","userId":""}},"outputId":"2712020b-4cbc-4786-9540-c9756b86f792","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-11-21 12:20:00--  https://raw.githubusercontent.com/girafe-ai/ml-course/msu_branch/homeworks/hw03_mnist/hw03_data_dict.npy\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 6272438 (6.0M) [application/octet-stream]\n","Saving to: ‘hw03_data_dict.npy’\n","\n","hw03_data_dict.npy  100%[===================>]   5.98M  --.-KB/s    in 0.1s    \n","\n","2023-11-21 12:20:01 (47.3 MB/s) - ‘hw03_data_dict.npy’ saved [6272438/6272438]\n","\n"]}],"source":["!wget https://raw.githubusercontent.com/girafe-ai/ml-course/msu_branch/homeworks/hw03_mnist/hw03_data_dict.npy"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"QFawm-EOssbX","executionInfo":{"status":"ok","timestamp":1700569207805,"user_tz":-180,"elapsed":413,"user":{"displayName":"","userId":""}},"outputId":"aa7d1cf3-69b2-49ba-c60f-08e7a782a72a","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["File saved to `submission_dict_hw03.npy`\n"]}],"source":["# do not change the code in the block below\n","# __________start of block__________\n","import os\n","\n","assert os.path.exists('hw03_data_dict.npy'), 'Please, download `hw03_data_dict.npy` and place it in the working directory'\n","\n","def get_predictions(model, eval_data, step=10):\n","\n","    predicted_labels = []\n","    model.eval()\n","    with torch.no_grad():\n","        for idx in range(0, len(eval_data), step):\n","            y_predicted = model(eval_data[idx:idx+step].reshape(-1, 784))\n","            predicted_labels.append(y_predicted.argmax(dim=1))\n","\n","    predicted_labels = torch.cat(predicted_labels)\n","    return predicted_labels\n","\n","loaded_data_dict = np.load('hw03_data_dict.npy', allow_pickle=True)\n","\n","submission_dict = {\n","    'train': get_predictions(model, torch.FloatTensor(loaded_data_dict.item()['train'])).numpy(),\n","    'test': get_predictions(model, torch.FloatTensor(loaded_data_dict.item()['test'])).numpy()\n","}\n","\n","np.save('submission_dict_hw03.npy', submission_dict, allow_pickle=True)\n","print('File saved to `submission_dict_hw03.npy`')\n","# __________end of block__________"]},{"cell_type":"markdown","metadata":{"id":"8JXQQF5essbX"},"source":["На этом задание завершено. Поздравляем!"]}],"metadata":{"kernelspec":{"display_name":"Py3 Research","language":"python","name":"py3_research"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.10"},"colab":{"provenance":[{"file_id":"https://github.com/girafe-ai/ml-course/blob/msu_branch/homeworks/hw03_mnist/HW03.ipynb","timestamp":1700569291625}]}},"nbformat":4,"nbformat_minor":0}